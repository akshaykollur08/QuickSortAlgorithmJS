// import {quickSort} from './quickSortAlgorithm.js'
import { quickSort } from "./quickSortAlgorithm.js";
// 
// 
// 
// 
// TEST DRIVERS SECTION FILE

// Helper function for the test drivers to compare the equality of two arrays
function arraysEqual(arr1, arr2)
{
    if (arr1.length != arr2.length) return false;
    else
    {
        for (let i = 0; i < arr1.length; i++)
        {
            if (arr1[i] != arr2[i]) return false;
        }
    }
    return true;
}

// Test drivers function to run and check a test case
// Parameters passed are the initial array, expected array, and the name of the test case
function runTestCase(arr, expected, testName)
{
    // Performs quickSort on the array
    quickSort(arr, 0, arr.length - 1);
    // Compares the result of the array to the expected to see if they
    // are the same
    let result = arraysEqual(arr, expected);

    // Prints the result of the test case in a nice and easy way
    console.log(`${testName}: ${result ? 'PASSED' : 'FAILED'}`);
    if (!result)
    {
        console.log(`   Expected: ${expected}`);
        console.log(`   Got:      ${arr}`);
    }
}

// Function calls for every test case using the runTestCase method for the drivers testing various cases:
// 
// Test Case 1: Simple unsorted array
runTestCase(
    [230, 12, 11, 9, 2, 16, 99, 10, 3, -12],
    [-12, 2, 3, 9, 10, 11, 12, 16, 99, 230],
    'Test Case 1: Simple unsorted array'
);

// Test Case 2: Empty array
runTestCase(
    [],
    [],
    'Test Case 2: Empty array'
);

// Test Case 3: Single element array
runTestCase(
    [29],
    [29],
    'Test Case 3: Single element array'
);

// Test Case 4: Initially sorted array
runTestCase(
    [1, 2, 3, 4, 5, 7, 19, 20, 25],
    [1, 2, 3, 4, 5, 7, 19, 20, 25],
    'Test Case 4: Initially sorted array'
);

// Test Case 5: Reverse sorted array
runTestCase(
    [7, 6, 5, 4, 3, 2, 1],
    [1, 2, 3, 4, 5, 6, 7],
    'Test Case 5: Reverse sorted array'
);

// Test Case 6: Array with duplicates
runTestCase(
    [4, 2, 4, 1, 4, 3, 5, 2, 5],
    [1, 2, 2, 3, 4, 4, 4, 5, 5],
    'Test Case 6: Array with duplicates'
);

// Test Case 7: Array with large data set (n=100)
runTestCase(
    [42, 17, 93, 8, 76, 55, 34, 1, 67, 89, 23, 58, 10, 49, 99, 71, 36, 21, 64, 87,
        19, 3, 82, 61, 94, 15, 44, 78, 27, 56, 6, 81, 92, 12, 53, 33, 95, 29, 72, 85,
        14, 60, 38, 100, 66, 31, 50, 11, 83, 2, 96, 25, 48, 90, 7, 68, 39, 13, 47, 73,
        32, 26, 88, 62, 35, 20, 52, 4, 59, 70, 18, 84, 41, 30, 5, 77, 91, 24, 98, 9,
        63, 43, 57, 28, 40, 22, 86, 37, 74, 65, 51, 79, 16, 75, 80, 54, 45, 97, 46],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
        42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
    'Test Case 7: Array with large data set'

);

// Test Case 8: Array with even larger data set (n=1000)
runTestCase(
    [483, 91, 775, 901, 380, 13, 992, 750, 265, 334, 656, 142, 715, 503, 862, 427, 540, 973, 720, 371,
        68, 234, 671, 102, 284, 913, 156, 244, 808, 972, 379, 566, 694, 236, 60, 845, 414, 591, 896, 827,
        121, 463, 859, 54, 39, 632, 511, 194, 347, 611, 526, 108, 21, 523, 632, 182, 140, 686, 709, 460,
        980, 589, 311, 936, 599, 419, 155, 844, 401, 790, 876, 523, 748, 228, 225, 607, 33, 451, 809, 247,
        146, 299, 381, 330, 166, 931, 733, 561, 989, 316, 701, 317, 460, 748, 364, 164, 10, 307, 443, 100,
        962, 240, 728, 833, 197, 524, 129, 951, 618, 889, 724, 448, 184, 396, 372, 885, 279, 137, 464, 266,
        520, 943, 856, 689, 281, 904, 672, 678, 990, 215, 255, 304, 980, 223, 701, 676, 229, 415, 996, 398,
        919, 491, 441, 868, 82, 952, 842, 257, 766, 344, 743, 792, 914, 341, 353, 751, 553, 49, 878, 627,
        525, 402, 812, 215, 769, 288, 577, 923, 370, 518, 646, 116, 268, 343, 981, 909, 367, 970, 631, 254,
        159, 891, 388, 737, 445, 293, 522, 225, 657, 704, 572, 872, 839, 440, 146, 283, 506, 871, 415, 765,
        345, 432, 13, 312, 183, 785, 93, 257, 743, 588, 598, 931, 314, 981, 798, 207, 960, 309, 173, 942,
        147, 766, 721, 804, 242, 243, 853, 720, 98, 218, 558, 97, 130, 677, 931, 579, 410, 365, 441, 314,
        940, 248, 687, 78, 684, 596, 909, 319, 603, 761, 922, 947, 114, 168, 337, 19, 778, 276, 589, 94,
        930, 550, 690, 831, 128, 924, 160, 841, 558, 651, 447, 279, 331, 805, 680, 116, 704, 876, 115, 122,
        362, 318, 957, 432, 145, 874, 164, 510, 825, 641, 305, 401, 575, 452, 52, 962, 207, 869, 225, 620,
        726, 299, 63, 690, 73, 487, 764, 510, 998, 111, 614, 132, 682, 973, 81, 56, 436, 842, 949, 899,
        756, 245, 43, 453, 827, 798, 451, 587, 621, 897, 694, 556, 688, 973, 726, 210, 946, 540, 689, 642,
        129, 173, 874, 912, 309, 97, 201, 473, 784, 815, 737, 663, 949, 96, 282, 396, 745, 741, 146, 475,
        184, 738, 783, 438, 823, 596, 64, 215, 787, 100, 828, 198, 347, 237, 723, 610, 196, 967, 257, 92,
        813, 623, 90, 511, 219, 200, 284, 245, 366, 528, 486, 70, 438, 941, 232, 373, 568, 772, 882, 292,
        162, 723, 282, 541, 440, 859, 465, 206, 982, 525, 184, 821, 324, 451, 153, 523, 671, 419, 367, 531,
        395, 628, 310, 238, 61, 942, 456, 517, 763, 156, 960, 493, 687, 610, 97, 322, 457, 811, 574, 749,
        513, 362, 335, 130, 786, 592, 682, 487, 302, 83, 854, 964, 498, 876, 354, 444, 491, 460, 396, 290,
        216, 907, 557, 456, 611, 471, 474, 295, 307, 469, 141, 137, 701, 530, 620, 551, 160, 63, 258, 781,
        467, 353, 275, 144, 929, 574, 763, 356, 516, 501, 342, 328, 541, 365, 288, 277, 935, 418, 893, 743,
        539, 493, 145, 711, 931, 515, 666, 100, 972, 704, 479, 780, 365, 354, 241, 640, 610, 526, 881, 474,
        487, 975, 438, 384, 120, 821, 514, 843, 960, 604, 946, 177, 828, 322, 453, 198, 943, 527, 324, 432,
        986, 900, 298, 411, 124, 226, 656, 313, 313, 580, 192, 570, 378, 376, 860, 277, 704, 784, 658, 755,
        354, 290, 151, 476, 201, 833, 911, 721, 994, 668, 126, 290, 498, 241, 897, 512, 257, 320, 715, 267,
        811, 720, 61, 98, 455, 648, 737, 731, 442, 694, 371, 836, 101, 653, 372, 594, 135, 784, 916, 692,
        900, 183, 215, 706, 946, 220, 439, 371, 57, 227, 154, 815, 677, 182, 660, 901, 103, 538, 317, 343,
        297, 947, 927, 107, 598, 870, 445, 892, 642, 642, 451, 888, 628, 576, 199, 482, 732, 313, 412, 804],
    [10, 13, 13, 19, 21, 33, 39, 43, 49, 52, 54, 56, 57, 60, 61, 61, 63, 63, 64, 68, 70, 73, 78, 81, 82, 83,
        90, 91, 92, 93, 94, 96, 97, 97, 97, 98, 98, 100, 100, 100, 101, 102, 103, 107, 108, 111, 114, 115, 116,
        116, 120, 121, 122, 124, 126, 128, 129, 129, 130, 130, 132, 135, 137, 137, 140, 141, 142, 144, 145, 145,
        146, 146, 146, 147, 151, 153, 154, 155, 156, 156, 159, 160, 160, 162, 164, 164, 166, 168, 173, 173, 177,
        182, 182, 183, 183, 184, 184, 184, 192, 194, 196, 197, 198, 198, 199, 200, 201, 201, 206, 207, 207, 210,
        215, 215, 215, 215, 216, 218, 219, 220, 223, 225, 225, 225, 226, 227, 228, 229, 232, 234, 236, 237, 238,
        240, 241, 241, 242, 243, 244, 245, 245, 247, 248, 254, 255, 257, 257, 257, 257, 258, 265, 266, 267, 268,
        275, 276, 277, 277, 279, 279, 281, 282, 282, 283, 284, 284, 288, 288, 290, 290, 290, 292, 293, 295, 297,
        298, 299, 299, 302, 304, 305, 307, 307, 309, 309, 310, 311, 312, 313, 313, 313, 314, 314, 316, 317, 317,
        318, 319, 320, 322, 322, 324, 324, 328, 330, 331, 334, 335, 337, 341, 342, 343, 343, 344, 345, 347, 347,
        353, 353, 354, 354, 354, 356, 362, 362, 364, 365, 365, 365, 366, 367, 367, 370, 371, 371, 371, 372, 372,
        373, 376, 378, 379, 380, 381, 384, 388, 395, 396, 396, 396, 398, 401, 401, 402, 410, 411, 412, 414, 415,
        415, 418, 419, 419, 427, 432, 432, 432, 436, 438, 438, 438, 439, 440, 440, 441, 441, 442, 443, 444, 445,
        445, 447, 448, 451, 451, 451, 451, 452, 453, 453, 455, 456, 456, 457, 460, 460, 460, 463, 464, 465, 467,
        469, 471, 473, 474, 474, 475, 476, 479, 482, 483, 486, 487, 487, 487, 491, 491, 493, 493, 498, 498, 501,
        503, 506, 510, 510, 511, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 523, 523, 524, 525, 525,
        526, 526, 527, 528, 530, 531, 538, 539, 540, 540, 541, 541, 550, 551, 553, 556, 557, 558, 558, 561, 566,
        568, 570, 572, 574, 574, 575, 576, 577, 579, 580, 587, 588, 589, 589, 591, 592, 594, 596, 596, 598, 598,
        599, 603, 604, 607, 610, 610, 610, 611, 611, 614, 618, 620, 620, 621, 623, 627, 628, 628, 631, 632, 632,
        640, 641, 642, 642, 642, 646, 648, 651, 653, 656, 656, 657, 658, 660, 663, 666, 668, 671, 671, 672, 676,
        677, 677, 678, 680, 682, 682, 684, 686, 687, 687, 688, 689, 689, 690, 690, 692, 694, 694, 694, 701, 701,
        701, 704, 704, 704, 704, 706, 709, 711, 715, 715, 720, 720, 720, 721, 721, 723, 723, 724, 726, 726, 728,
        731, 732, 733, 737, 737, 737, 738, 741, 743, 743, 743, 745, 748, 748, 749, 750, 751, 755, 756, 761, 763,
        763, 764, 765, 766, 766, 769, 772, 775, 778, 780, 781, 783, 784, 784, 784, 785, 786, 787, 790, 792, 798,
        798, 804, 804, 805, 808, 809, 811, 811, 812, 813, 815, 815, 821, 821, 823, 825, 827, 827, 828, 828, 831,
        833, 833, 836, 839, 841, 842, 842, 843, 844, 845, 853, 854, 856, 859, 859, 860, 862, 868, 869, 870, 871,
        872, 874, 874, 876, 876, 876, 878, 881, 882, 885, 888, 889, 891, 892, 893, 896, 897, 897, 899, 900, 900,
        901, 901, 904, 907, 909, 909, 911, 912, 913, 914, 916, 919, 922, 923, 924, 927, 929, 930, 931, 931, 931,
        931, 935, 936, 940, 941, 942, 942, 943, 943, 946, 946, 946, 947, 947, 949, 949, 951, 952, 957, 960, 960,
        960, 962, 962, 964, 967, 970, 972, 972, 973, 973, 973, 975, 980, 980, 981, 981, 982, 986, 989, 990, 992,
        994, 996, 998],
    'Test Case 8: Array with even larger data set'


);

// 
// 
// 
// Problem 2
// Function to generate an array of random numbers of
// specified size
function generateArray(size)
{
    const arr = [];
    for (let i = 0; i < size; i++)
    {
        // Adds a number between 0 and 1000 to the arr array
        arr.push(Math.floor(Math.random() * 1000));
    }
    return arr;
}

// Sets the n or the size to 1000
const arrSize = 1000;
const largeArray1000 = generateArray(arrSize);

// Intiial array display
console.log("\n\nContents of array before sorting: \n", largeArray1000);

// Start timer
console.time("Array Time");

// Quick Sort Algorithm call
quickSort(largeArray1000, 0, largeArray1000.length - 1);

// End the timer
console.timeEnd("Array Time");

console.log("Contents of the array after sorting: \n", largeArray1000);








